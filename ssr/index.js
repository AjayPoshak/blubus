// eslint-disable-next-line
import * as type from '@babel/polyfill';

import fs from 'fs';
import Koa from 'koa';
import Raven from 'raven';
import serve from 'koa-static';
import Router from 'koa-router';
import Loadable from 'react-loadable';
import bodyparser from 'koa-bodyparser';

import routes from './routes';

const isProd = process.env.NODE_ENV;

const app = new Koa(),
	router = new Router();

if (isProd === 'PRODUCTION') {
	Raven.config('https://5b1a4966d5934836ae9f6bc73d5370bb@sentry.io/1232248').install();
}

app.use(serve('.')); // Serving static build files
app.use(bodyparser()); // Parsing body of every request

/**
 * Logging time taken by a request
 */
app.use(async (ctx, next) => {
	const start = new Date();
	await next();
	const end = new Date();
	console.log(`${ctx.method} ${ctx.url} time taken ${end - start}`);
});

/**
 * Access bundle names with hash generated by webpack
 */

try {
	global.bundles = JSON.parse(fs.readFileSync('build/assets.json', 'utf8'));
} catch (e) {
	// eslint-disable-next-line
	throw Error(
		'It looks like you didn\'t run "yarn run dev:web" or "yarn run build:web" before starting SSR. Please wait until either of them completes before starting SSR.'
	);
}

/**
 * Handling errors globally
 */
app.use(async (ctx, next) => {
	try {
		await next();
	} catch (err) {
		console.error(`Global error handling ${err}`);
		isProd && Raven.captureException(err);
	}
});
routes(router);

app.use(router.routes()).use(router.allowedMethods());

Loadable.preloadAll().then(() => {
	app.listen(process.env.PORT || 8081, () => {
		console.log(`Server side rendering started on ${process.env.PORT || 8081}`);
	});
});
